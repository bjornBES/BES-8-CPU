OVERVIEW
 20 bit data width
 20 bit addr width ~ 131 kilobytes
 Memory banking via the MB register allowing for 65535 possible memory banks
 
INSTRUCTIONS
 0x00    NOP  
 0x01    MOV  
 0x02    PUSH 
 0x03    POP  
 0x04    ADD  
 0x05    SUB  
 0x06    MUL  
 0x07    DIV  
 0x08    AND  
 0x09    OR   
 0x0A    NOT  
 0x0B    NOR  
 0x0C    ROL  
 0x0D    ROR  
 0x0E    JMP  
 0x0F    CMP  
 0x10    JLE  
 0x11    JE   
 0x12    JGE  
 0x13    JG   
 0x14    JNE  
 0x15    JL   
 0x16    JER  
 0x17    JMC  
 0x18    JMZ  
 0x19    JNC  
 0x1A    INT  
 0x1B    CALL 
 0x1C    RTS  
 0x1D    RET  
 0x1E    PUSHR
 0x1F    POPR 
 0x20    INC  
 0x21    DEC  
 0x22    IN   
 0x23    OUT  
 0x24    CLF  
 0x25    SEF  
 0x26    XOR  
 0x27    JMS  
 0x28    JNS  
 0x29    SHL  
 0x2A    SHR  
 0x2B    HALT 

REGISTERS
AX  (0b0000_0000)   GP 16 bit register
AL  (0b0010_0000)   GP 8 bit register LOW
AH  (0b0001_0000)   GP 8 bit register HIGH
BX  (0b0000_0001)   GP 16 bit register
BL  (0b0010_0001)   GP 8 bit register LOW
BH  (0b0001_0001)   GP 8 bit register HIGH
CX  (0b0000_0010)   GP 16 bit register
CL  (0b0010_0010)   GP 8 bit register LOW
CH  (0b0001_0010)   GP 8 bit register HIGH
DX  (0b0000_0011)   GP 16 bit register
DL  (0b0010_0011)   GP 8 bit register LOW
DH  (0b0001_0011)   GP 8 bit register HIGH
ZX  (0b0000_0100)   GP 16 bit register
ZL  (0b0010_0100)   GP 8 bit register LOW
ZH  (0b0001_0100)   GP 8 bit register HIGH
PC  (0b0000_0101)   Program Counter   16 bit register
SP  (0b0000_0110)   Stack Pointer     16 bit register
MB  (0b0000_0111)   Memory bank       16 bit register
X   (0b0000_1000)   16 bit Index register
XL  (0b0010_1000)   8 bit Index register LOW
XH  (0b0001_1000)   8 bit Index register HIGH
Y   (0b0000_1001)   16 bit Index register
YL  (0b0010_1001)   8 bit Index register LOW
YH  (0b0001_1001)   8 bit Index register HIGH
XY  (0b0000_1010)   32 bit Index register (combineing the X and Y registers into one)
AB  (0b0001_1010)   32 bit GP register (combineing the A and B registers into one)
CD  (0b0010_1010)   32 bit GP register (combineing the C and D registers into one)
PMB (0b0000_1011)   Program Memory bank
F   (0b0000_1111)   32 status register
    0.  ZERO
    1.  EQUAL
    2.  LESS
    3.  CARRY
    4.  UNUSED
    5.  SIGN FLAG
    6.  PARITY FLAG
    7.  OVERFLOW

    0.  INTERRUPT_ENABLE
    1.  HALT
    2.  ERROR
    3.  UNUSED
    4.  UNUSED
    5.  UNUSED
    6.  UNUSED
    7.  UNUSED

Calling convention
    Arguments pushed to stack in order from right to left
    Registers pushed using pushr
    Return value in ZX or stack

INSTRUCTIONS LAYOUT
XXXX_XXXX_ZZZZ_ZZZZ
X 8 bit instructions identifier
Z 8 bit instructions argument identifier

ARGUMENT IDENTIFIER
0000    imm                 #number                 here the value will be an Immediate 16 bit value
0001    address             [address]               here the value will be the value in from the address
0010    register            register                here the vlaue will be the registers value
0011    RegAddr             [register]              here the value will be the registers value as an address
0100    IndexReg            [address]&reg           
0101    IndexImm            [address]&number
0110    IndexRegAddrReg     [register]&register
0111    IndexRegAddrImm     [register]&imm

MEMORY LAYOUT
the memory layout is split op into 3 banks or more
you can used more banks but bank 0 to 2 is resuves
for the program 

BANK LAYOUT
Bank 0, 1, 2: 
    ROM Range static:               0x00000 to 0x30000

Bank 3:
    IO Range static:                0x0000 to 0x01FF
    Stack Range static:             0x0200 to 0x1FFF
    Interrupt Table Location:       0x2000 to 0x2000
    Video Memory Range static:      0x2001 to 0xD8FF
    Cache1 Range static:            0xD900 to 0xE8FF
    General Purpose Memory Range:   0xE900 to 0xFFFF

Bank 4:
    General Purpose Memory Range:   0x0000 to 0x7FFF
    Variable Memory Range static:   0x8000 to 0xFFFF

Bank 5:
    General Purpose Memory Range:   0x0000 to 0xFFFF

PORTS
PORTS are used to communicate with devices or by the BES-8 itself. See
SPECIAL PORTS for a list of which ports are controlled by the BES-8 and not
external devices.

SPECIAL PORTS
  0x000         Expansion slot 0
  0x001         Expansion slot 1
  0x002         Expansion slot 2
  0x003         Expansion slot 3
  0x004         Keyboard Port
  0x005         Screen port
  0x006         User port 1
  0x007         User port 2
  0x008         User port 3
  0x009         User port 4
  0x00A         Disk 1
  0x00B         Disk 2
  0x00C         Disk 3
  0x00D         Disk 4
  0x00E         Floppy Disk       Read only
  0x00F         Cartridge Disk    Read only

EXPANSION PORT
in the Expansion port there is a way to expant the memory using the data bus and addr bus.
you can use the INB and OUTB to communicate to a device on one of the 10 Expansion ports,
this can be a mouse, a Keyboard and other things for example extar RAM.

VRAM LAYOUT
XXXX_XXXX YYYY_YYYY CCCC_CCCC SS0T-0000
X = cursor pos X
Y = cursor pos Y
C = color data
S = Layer Index
T = type 1 = char else 0 = pixle

SCREEN
The screen circuit can be read/written to using INB and OUTB instructions.
It contains 5 registers that can be read/written for the cursors and other things, 
The screen is 192 x 144 pixles and the screen buffer is in the other part of VRAM, 
with a 128 color palette.
the screen can be in to different modes depending on the starting value sent to register 1

BIOS interrupts
A BIOS interrupt is a way to communicate 