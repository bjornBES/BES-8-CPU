; 1 Disk (0 - 13)
; 2 Page
; 3 sector
.global Read:
 push AX
 push X

 mov ZX SP

 add SP #4

 pop AL
 pop X
 pop AH

 mov SP ZX

 outb #10h X
 NOP
 outb #10h AX
 NOP
 inb #10h ZX
 mov ZX ZX
 jmz [Done]
 sef #16
 Done:

 pop X
 pop AX
 rts

; 1 Disk (0 - 13)
; 2 Page
; 3 sector
; 4 data
.global Write:
 push AX
 push BX
 push X

 mov ZX SP

 add SP #5

 pop AH
 pop X
 pop BX
 or AX BX

 mov SP ZX

 pop X
 pop AX
 rts

; offseted by size of Name + 2
; stack Name (string with 0)
; disk (0 - 13)
; deep (1 - 255) where root is 1
; return Addr (ZX)
.global GetFile:

 rts

; offseted by 3
; Disk (0 - 13)
; File offset
; returns using Text_Buffer
.global Get_Continue_Addr:

 rts

.include src/asm/math

.org 37000h
Text_Buffer: