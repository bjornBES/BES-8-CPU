mov MB, #2

; public type Var_HELLO = [SP]
mov [12000h], #0

; local type Var_hello = [SP]
mov [12001h], #0

; global type Var_etst = [SP]
mov [12002h], #10

; const `word` Var_NULL = 0

; global type Var_Address = [SP]
mov [12004h], #0

; func return type is `func`
Func_Main:
pushr
mov ZX, SP
add SP, #8

; local type Var_A = [SP]
inc SP
mov [11000h], [SP]

; local type Var_B = [SP]
inc SP
mov [11001h], [SP]

; local type Var_C = [SP]
inc SP
mov [11002h], [SP]
mov SP, ZX

; local type Var_ABC = Var_NULL
mov [12005h], [Var_NULL]

; [12005h] == [11000h]
mov [12005h], [11000h]

push ZX
push AX

; ABC
push [12005h]

push #1

; open_paren
push #1

push #1

; plus 0
push #1

pop AX
pop ZX
add ZX, AX
push ZX

; close_paren
; star 1
push #10

pop AX
pop ZX
mul ZX, AX
push ZX

; plus 0

pop AX
pop ZX
add ZX, AX
push ZX

; plus 0

pop AX
pop ZX
add ZX, AX
push ZX

; plus 0

pop AX
pop ZX
add ZX, AX
push ZX

pop R1
pop AX
pop ZX
push R1

pop R1
mov [12005h], R1

; [12004h] == #12005h
mov [12004h], #12005h

mov [12004h], #0

mov [12005h], #0
push #20
push #10
call [Func_add]

; local type Var_ABC = [SP]
mov [12005h], ZX

; Exit
mov AX, [11000h]
int #0

mov [11000h], #0

mov [11001h], #0

mov [11002h], #0

mov [12005h], #0

; close_curly
popr
; returning from Main with 3 argsuments
ret #3

; func return type is `word`
Func_add:
pushr
mov ZX, SP
add SP, #8

; local type Var_NumberA = [SP]
inc SP
mov [10ffeh], [SP]

; local type Var_NumberB = [SP]
inc SP
mov [10fffh], [SP]
mov SP, ZX

push ZX
push AX

; NumberA
push [10ffeh]

; NumberB
push [10fffh]

; NumberA
push [10ffeh]

push #10

; star 1

pop AX
pop ZX
mul ZX, AX
push ZX

; fslash 1

pop AX
pop ZX
mul ZX, AX
push ZX

; plus 0

pop AX
pop ZX
add ZX, AX
push ZX

pop R1
pop AX
pop ZX
push R1

; local type Var_Result = [SP]
inc SP
mov [12006h], [SP]

; moving Address 0x12006 into an temp register to return out of the func
mov R1, [12006h]

mov [10ffeh], #0

mov [10fffh], #0

mov [12006h], #0

; close_curly
popr
mov ZX, R1
; returning from add with 2 argsuments
ret #2

; Inports
.include ./Libs/Function.basm

; const `word` NULL = 0 at line 3
Var_NULL:
.word 0
